# MeditActive API
MeditActive is a platform designed to help users focus on a set of predefined goals aimed at improving their lifestyle. The task is to develop a set of JSON RESTful APIs to implement this functionality within their app. No front-end development is required for this project.

## Requirements:
All APIs must adhere to the REST architecture, including naming conventions, methods, and response status codes.
APIs must allow for the insertion, modification, and deletion of a user with the following characteristics: email, first name, and last name.
APIs must allow for the insertion, modification, and deletion of a goal interval with the following characteristics: start date, end date, and associated user.
APIs must allow for the association of a goal with an interval.
APIs must allow for the retrieval of all intervals, filtering by included goals, and filtering by start and end dates.
You can use either MySQL or MongoDB to store your information. If you choose MySQL, remember to include a migrations.sql file to rebuild your database structure.
If you use MySQL, ensure that all database queries are sanitized and not vulnerable to SQL injection attacks. Therefore, the use of prepared statements is required to prevent this type of attack.
Remember that MongoDB can also be susceptible to NoSQL injection attacks, so take appropriate precautions.
## Implementation:
## User APIs:
POST /user: Creates a new user with email, first name, and last name.
PUT /user/{user_id}: Updates user information.
DELETE /user/{user_id}: Deletes a user.
Goal Interval APIs:
POST /interval: Creates a new goal interval with start date, end date, and associated user.
PUT /interval/{interval_id}: Updates goal interval information.
DELETE /interval/{interval_id}: Deletes a goal interval.
Goal Association APIs:
POST /interval/{interval_id}/goal: Associates a goal with a specific interval.
Retrieval and Filtering APIs:
GET /intervals: Retrieves all intervals.
GET /intervals?goal={goal_id}: Retrieves intervals filtered by included goals.
GET /intervals?start_date={start_date}&end_date={end_date}: Retrieves intervals filtered by start and end dates.
Database Structure (MySQL Example):
sql
Copy code
CREATE TABLE users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    email VARCHAR(255) NOT NULL,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL
);

CREATE TABLE intervals (
    interval_id INT AUTO_INCREMENT PRIMARY KEY,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    user_id INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE goals (
    goal_id INT AUTO_INCREMENT PRIMARY KEY,
    goal_name VARCHAR(255) NOT NULL
);

CREATE TABLE interval_goals (
    interval_id INT,
    goal_id INT,
    FOREIGN KEY (interval_id) REFERENCES intervals(interval_id),
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id),
    PRIMARY KEY (interval_id, goal_id)
);
## Technologies Used:
MySQL or MongoDB (Database)
JSON
Security Considerations:
Ensure all user inputs are properly sanitized and validated to prevent injection attacks.
Use prepared statements for MySQL queries to prevent SQL injection.
Implement appropriate access controls and authentication mechanisms.
## Contributing:
Contributions to the project are welcome! Please open an issue first to discuss any changes you would like to make.

License:
This project is licensed under the MIT License. See the LICENSE file for details.